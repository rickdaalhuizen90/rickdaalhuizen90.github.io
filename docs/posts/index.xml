<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Rick Daalhuizen</title><link>https://rickdaalhuizen.com/posts/</link><description>Recent content in Blog on Rick Daalhuizen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://rickdaalhuizen.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Moving from Sequel Pro to Sequel Ace</title><link>https://rickdaalhuizen.com/posts/moving-from-sequel-pro-to-sequel-ace/</link><pubDate>Fri, 11 Sep 2020 17:48:26 +0100</pubDate><guid>https://rickdaalhuizen.com/posts/moving-from-sequel-pro-to-sequel-ace/</guid><description>Sequel Pro is an open-source SQL Client for MacOS, and for many Developers (myself included) the must-have tool when dealing with a SQL server. It&amp;rsquo;s fast, has an easy interface, and is very intuitive to use.
You may have noticed that in recent years little has changed in terms of features and how it looks. After some recent updates in MacOS, I keep running into new bugs in Sequel Pro:</description></item><item><title>Utilize configuration XML and variables scope.</title><link>https://rickdaalhuizen.com/posts/utilize-configuration-xml-and-variables-scope/</link><pubDate>Fri, 04 Sep 2020 17:48:38 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/utilize-configuration-xml-and-variables-scope/</guid><description>Much of the configuration in Magento 2 is done by xml files, and placed in the [Module_Root]/etc/ directory. Depending on the scope of your configuration, place them in etc/adminhtml, etc/frontend or under global scope under etc/. When you put them in adminhtml or frontend, this overwrites the global scope.
List of XML config files. acl.xml - resource title, sort adminhtml/rules/payment_{country}.xml - paypal address_formats.xml address_types.xml - format code and title only cache.</description></item><item><title>Understanding the file system in Magento 2</title><link>https://rickdaalhuizen.com/posts/understanding-the-file-system-in-magento-2/</link><pubDate>Mon, 24 Aug 2020 17:48:38 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/understanding-the-file-system-in-magento-2/</guid><description>One of the first things you can do to get started with component development is to understand and set up the file system. Each type of component has a different file structure, although all components require certain files. In addition, you can choose the component root directory to start development. The following sections have more information. - Magento DevDocs - About component file structure
Where to find Javascript and PHTML files?</description></item><item><title>Understanding Magento 2 Module-Based Architecture</title><link>https://rickdaalhuizen.com/posts/understanding-magento-2-module-based-architecture/</link><pubDate>Wed, 19 Aug 2020 17:26:43 +0100</pubDate><guid>https://rickdaalhuizen.com/posts/understanding-magento-2-module-based-architecture/</guid><description>Let&amp;rsquo;s start with what a module is, how a module works and how we can register it.
Module overview The Magento 2 documentation explains the following about modules:
A module is a logical group – that is, a directory containing blocks, controllers, helpers, models – that are related to a specific business feature. In keeping with Magento’s commitment to optimal modularity, a module encapsulates one feature and has minimal dependencies on other modules.</description></item><item><title>How to Configure a Magento Multistore in Docker</title><link>https://rickdaalhuizen.com/posts/how-to-configure-a-magento-multi-store-in-docker/</link><pubDate>Tue, 04 Aug 2020 10:51:22 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/how-to-configure-a-magento-multi-store-in-docker/</guid><description>In warden it is possible to set up multiple domains for your project. Warden uses Traefik and is installed as a Global Service.
Traefik ensures that requests are intercepted and sent to the correct back-end service e.g. https: //app.example1.test https: //app.example2.test. For this it uses an HTTP reverse proxy and a load balancer.
It also has a dashboard to monitor different metrics. This can be found if you go to https: https://traefik.</description></item><item><title>How to Setup a Multistore in Magento 2</title><link>https://rickdaalhuizen.com/posts/how-to-setup-a-multistore-in-magento2/</link><pubDate>Tue, 28 Jul 2020 13:39:31 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/how-to-setup-a-multistore-in-magento2/</guid><description>It is possible to configure multiple instances in Magento.
Each instance can contain different attributes, including Languages, Domain names, Categories, Products, Currencies and more.
A Magento installation can have multiple websites that have multiple stores or store views.
Magento 2 multistore hierarchy Global: At the top of the hierarchy. This is what you get when you install Magento. This includes all default configuration.
Website: Magento installations begin with a single website which by default, is called Main Website.</description></item><item><title>How to Setup a Magento 2 Development Environment with Docker</title><link>https://rickdaalhuizen.com/posts/how-to-setup-a-magento-2-development-environment-with-docker/</link><pubDate>Tue, 21 Jul 2020 14:32:47 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/how-to-setup-a-magento-2-development-environment-with-docker/</guid><description>When I just started developing PHP applications I used Mamp or Xamp to set up a local Lamp stack.
Later this became Vagrant in combination with VirtualBox and eventually Docker.
The main advantage of Docker is portability, performance and it is scalable. This pays off, especially when you work in a team.
When using commerce with Magento 2 it is possible to use the Magento Cloud Docker environment.
Brief introduction to docker The main difference between Docker and a VM is mainly the architecture between the 2.</description></item><item><title>Jazz Up your ZSH Terminal with Prezto</title><link>https://rickdaalhuizen.com/posts/jazz-up-your-zsh-terminal-with-prezto/</link><pubDate>Tue, 14 Jul 2020 17:48:15 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/jazz-up-your-zsh-terminal-with-prezto/</guid><description>For some time now I&amp;rsquo;ve been using zsh as my default Unix shell, which is an extended Bourne shell with many improvements, including some features from bash, ksh and tcsh. One of my favorite shells is fish shell. It&amp;rsquo;s easy to set-up and many of the features that I use comes pre-installed, as it is not POSIX supported it has a much readable (fish) syntax for scripting.
Why I switched from fish to zsh, and using Prezto over oh-my-zsh.</description></item><item><title>Setting up PhpStorm for Magento 2</title><link>https://rickdaalhuizen.com/posts/setting-up-phpstorm-for-magento-2/</link><pubDate>Tue, 07 Jul 2020 17:48:38 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/setting-up-phpstorm-for-magento-2/</guid><description>As a Magento developer you are dealing with a complex code-base that you have to navigate through. That is why it is useful to have an IDE (Integrated Development Environment) that helps you write your code and ensure its quality.
Perhaps one of the most famous IDE for PHP developers is PHPStorm. PHPStorm comes out of the box with all the tools you need for writing PHP applications. Here are some tips and tricks about my PHPStorm configurations that I use as a Magento Developer on a daily basis.</description></item><item><title>Declarative Schema Overview in Magento 2 - Part 2</title><link>https://rickdaalhuizen.com/posts/declarative-schema-overview-in-magento2-part-2/</link><pubDate>Tue, 30 Jun 2020 17:49:31 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/declarative-schema-overview-in-magento2-part-2/</guid><description>In the first part we discussed what declarative schemes are, why you should use declarative schemes instead of install / upgrade scripts, how to create, edit and eventually delete a declarative. If you haven&amp;rsquo;t already read the first part, I suggest you take a moment to read this first. As an example, I created a simple module containing a InstallSchema.php that looks like this.
1&amp;lt;?php 2/** 3* Copyright (c) 2016 Magento.</description></item><item><title>Declarative Schema Overview in Magento 2 - Part 1</title><link>https://rickdaalhuizen.com/posts/declarative-schema-overview-in-magento2-part-1/</link><pubDate>Tue, 23 Jun 2020 17:49:31 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/declarative-schema-overview-in-magento2-part-1/</guid><description>When we make changes to our database it&amp;rsquo;s usually done through an installation or upgrade script. We start by creating an install script that has a php class &amp;ldquo;InstallSchema&amp;rdquo; and in it we write our PHP code to make adjustments to the database. Then when we need to change a table, we create an &amp;ldquo;UpgradeSchema&amp;rdquo;, look at the version where it needs to upgrade and add our changes.
The disadvantages of using installation scripts During installation, Magento goes through all versions of the module until the latest version is reached.</description></item><item><title>Magento 2 Module Development with Pestle</title><link>https://rickdaalhuizen.com/posts/magento-2-module-development-with-pestle/</link><pubDate>Tue, 16 Jun 2020 17:49:31 +0200</pubDate><guid>https://rickdaalhuizen.com/posts/magento-2-module-development-with-pestle/</guid><description>Magento 2 has a wide range of tools that help you with developing modules. One of the well-known CLI tools in Magento is Magerun. This is an extension of Magento&amp;rsquo;s own CLI tool that already comes out of the box when you install Magento 2. One of my favorite tools that I use a lot is Pestle by Alan Storm.
Since much of our code we write mainly consists of template (reusable) code, Pestle helps to generate a lot of this code.</description></item></channel></rss>